"use strict";

var _react = _interopRequireDefault(require("react"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('getDepth', function () {
  it('flat', function () {
    var columns = [{
      name: 'name'
    }, {
      name: 'age'
    }, {
      name: 'job'
    }];
    var actual = (0, _utils.getDepth)(columns, 'columns');
    expect(actual).toBe(1);
  });
  it('nested', function () {
    var columns = [{
      name: 'name',
      columns: [{
        name: 'firstName',
        header: 'First Name'
      }, {
        name: 'lastName',
        header: 'Last Name'
      }]
    }, {
      name: 'age'
    }, {
      name: 'job',
      columns: [{
        name: 'jobTitle',
        header: 'title'
      }, {
        name: 'jobArea',
        header: 'area'
      }]
    }];
    var actual = (0, _utils.getDepth)(columns, 'columns');
    expect(actual).toBe(2);
  });
  it('deeply nested', function () {
    var columns = [{
      name: 'name',
      columns: [{
        name: 'firstName',
        header: 'First Name'
      }, {
        name: 'lastName',
        header: 'Last Name'
      }]
    }, {
      name: 'job',
      columns: [{
        name: 'jobTitle',
        header: 'title'
      }, {
        name: 'jobArea',
        header: 'area',
        columns: [{
          name: 'position'
        }]
      }]
    }, {
      name: 'age'
    }];
    var actual = (0, _utils.getDepth)(columns, 'columns');
    expect(actual).toBe(3);
  });
});
describe('getWidth', function () {
  it('flat', function () {
    var columns = [{
      name: 'name'
    }, {
      name: 'age'
    }, {
      name: 'job'
    }];
    expect((0, _utils.getWidth)(columns[0], 'columns')).toBe(1);
    expect((0, _utils.getWidth)(columns[1], 'columns')).toBe(1);
    expect((0, _utils.getWidth)(columns[2], 'columns')).toBe(1);
  });
  it('nested', function () {
    var columns = [{
      name: 'name',
      columns: [{
        name: 'firstName',
        header: 'First Name'
      }, {
        name: 'lastName',
        header: 'Last Name'
      }]
    }, {
      name: 'age'
    }, {
      name: 'job',
      columns: [{
        name: 'jobTitle',
        header: 'title'
      }, {
        name: 'jobArea',
        header: 'area'
      }]
    }];
    expect((0, _utils.getWidth)(columns[0], 'columns')).toBe(2);
    expect((0, _utils.getWidth)(columns[1], 'columns')).toBe(1);
    expect((0, _utils.getWidth)(columns[2], 'columns')).toBe(2);
  });
  it('deeply nested', function () {
    var columns = [{
      name: 'name',
      columns: [{
        name: 'firstName',
        header: 'First Name'
      }, {
        name: 'lastName',
        header: 'Last Name'
      }]
    }, {
      name: 'job',
      columns: [{
        name: 'jobTitle',
        header: 'title'
      }, {
        name: 'jobArea',
        header: 'area',
        columns: [{
          name: 'position'
        }, {
          name: 'location'
        }]
      }]
    }, {
      name: 'age'
    }];
    expect((0, _utils.getWidth)(columns[0], 'columns')).toBe(2);
    expect((0, _utils.getWidth)(columns[1], 'columns')).toBe(3);
    expect((0, _utils.getWidth)(columns[2], 'columns')).toBe(1);
  });
});
describe('getHeaderRows', function () {
  it('flat', function () {
    var columns = [{
      name: 'firstName',
      header: 'First Name'
    }, {
      name: 'lastName',
      header: 'Last Name'
    }, {
      name: 'age'
    }, {
      name: 'jobTitle',
      header: 'Job Title'
    }, {
      name: 'jobArea',
      header: 'Job Area'
    }];
    var expected = [[{
      name: 'firstName',
      header: 'First Name'
    }, {
      name: 'lastName',
      header: 'Last Name'
    }, {
      name: 'age'
    }, {
      name: 'jobTitle',
      header: 'Job Title'
    }, {
      name: 'jobArea',
      header: 'Job Area'
    }]];
    var actual = (0, _utils.getHeaders)(columns);
    expect(actual.length).toBe(1);
    expect(actual).toMatchObject(expected);
  });
  it('nested columns', function () {
    var columns = [{
      name: 'Person',
      columns: [{
        name: 'Name',
        columns: [{
          name: 'First'
        }, {
          name: 'Last'
        }]
      }, {
        name: 'Age'
      }, {
        name: 'Job',
        columns: [{
          name: 'Position'
        }, {
          name: 'Location'
        }]
      }]
    }, {
      name: 'Id'
    }];
    var expected = [[{
      name: 'Person',
      colSpan: 5
    }, {
      name: 'Id',
      rowSpan: 3
    }], [{
      name: 'Name',
      colSpan: 2
    }, {
      name: 'Age',
      rowSpan: 2
    }, {
      name: 'Job',
      colSpan: 2
    }], [{
      name: 'First'
    }, {
      name: 'Last'
    }, {
      name: 'Position'
    }, {
      name: 'Location'
    }]];
    var actual = (0, _utils.getHeaders)(columns);
    expect(actual.length).toBe(3);
    expect(actual[0].length).toBe(2);
    expect(actual[1].length).toBe(3);
    expect(actual[2].length).toBe(4);
    expect(actual).toMatchObject(expected);
  });
});
describe('getColumns', function () {
  it('flat', function () {
    var columns = [{
      name: 'firstName',
      header: 'First Name'
    }, {
      name: 'lastName',
      header: 'Last Name'
    }, {
      name: 'age'
    }, {
      name: 'jobTitle',
      header: 'Job Title'
    }, {
      name: 'jobArea',
      header: 'Job Area'
    }];
    var expected = [{
      name: 'firstName',
      header: 'First Name'
    }, {
      name: 'lastName',
      header: 'Last Name'
    }, {
      name: 'age'
    }, {
      name: 'jobTitle',
      header: 'Job Title'
    }, {
      name: 'jobArea',
      header: 'Job Area'
    }];
    var actual = (0, _utils.getColumns)(columns);
    expect(actual.length).toBe(5);
    expect(actual).toMatchObject(expected);
  });
  it('nested columns', function () {
    var columns = [{
      name: 'Person',
      columns: [{
        name: 'Name',
        columns: [{
          name: 'First'
        }, {
          name: 'Last'
        }]
      }, {
        name: 'Age'
      }, {
        name: 'Job',
        columns: [{
          name: 'Position'
        }, {
          name: 'Location'
        }]
      }]
    }, {
      name: 'Id'
    }];
    var expected = [{
      name: 'First'
    }, {
      name: 'Last'
    }, {
      name: 'Age'
    }, {
      name: 'Position'
    }, {
      name: 'Location'
    }, {
      name: 'Id'
    }]; // const actual = [];
    // columns.forEach(column => setColumns(actual, column));

    var actual = (0, _utils.getColumns)(columns);
    expect(actual.length).toBe(6);
    expect(actual).toMatchObject(expected);
  });
});
describe('isNil', function () {
  it('should be true for null and undefined values, false otherwise', function () {
    expect((0, _utils.isNil)(null)).toBe(true);
    expect((0, _utils.isNil)(undefined)).toBe(true);
    expect((0, _utils.isNil)({})).toBe(false);
    expect((0, _utils.isNil)(1)).toBe(false);
    expect((0, _utils.isNil)(true)).toBe(false);
    expect((0, _utils.isNil)(false)).toBe(false);
  });
});
describe('merge', function () {
  it('should merge all passed sources', function () {
    var actual = (0, _utils.merge)({}, {
      className: 'myClass'
    }, {
      nested: {
        prop1: 1,
        prop2: [1, 2]
      },
      deep_nested: {
        prop1: {
          id: 1,
          value: 'value'
        }
      }
    }, {
      nested: {
        prop1: 2,
        prop2: [3, 4]
      },
      deep_nested: {
        prop1: {
          id: 2,
          value: 'value',
          extra: 'extra'
        }
      },
      extraProp: {
        id: 3
      }
    });
    var expected = {
      className: 'myClass',
      nested: {
        prop1: 2,
        prop2: [1, 2, 3, 4]
      },
      deep_nested: {
        prop1: {
          id: 2,
          value: 'value',
          extra: 'extra'
        }
      },
      extraProp: {
        id: 3
      }
    };
    expect(actual).toMatchObject(expected);
  });
});