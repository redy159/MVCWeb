"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHeaders = getHeaders;
exports.getColumns = getColumns;
exports.getDepth = getDepth;
exports.getWidth = getWidth;
exports.isNil = isNil;
exports.merge = merge;

var deepmerge = _interopRequireWildcard(require("deepmerge"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getHeaders(columns) {
  var maxDepth = getDepth(columns, 'columns');
  var result = Array.from({
    length: maxDepth
  }).map(function (i) {
    return [];
  });

  function addItems(columns, depth) {
    columns.forEach(function (column) {
      var columnDef = _objectSpread({}, column);

      delete columnDef.columns;

      if (column.columns) {
        var colSpan = getWidth(column, 'columns');

        if (colSpan > 1) {
          columnDef.colSpan = colSpan;
        }

        addItems(column.columns, depth + 1);
      } else {
        var rowSpan = maxDepth - depth;

        if (rowSpan > 1) {
          columnDef.rowSpan = maxDepth - depth;
        }
      }

      result[depth].push(columnDef);
    });
  }

  addItems(columns, 0);
  return result;
}

function getColumns(columns) {
  var result = [];

  function setColumns(column) {
    if (column.columns == null) {
      result.push(column);
      return;
    }

    column.columns.forEach(function (child) {
      return setColumns(child);
    });
  }

  columns.forEach(function (column) {
    return setColumns(column);
  });
  return result;
}

function getDepth(arr, childProp) {
  if (arr == null) {
    return 0;
  }

  var depth = 0;
  arr.forEach(function (item) {
    depth = Math.max(depth, getDepth(item[childProp], childProp));
  });
  return depth + 1;
}

function getWidth(item, childProp) {
  if (item[childProp] == null) {
    return 1;
  }

  var width = 0;
  item[childProp].forEach(function (child) {
    width += getWidth(child, childProp);
  });
  return width;
}

function isNil(obj) {
  return obj == null;
}

function merge() {
  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {
    objects[_key] = arguments[_key];
  }

  var firstObj = objects[0];
  var destination = isNil(firstObj) ? {} : firstObj;
  var existingObjects = objects.filter(function (source) {
    return !isNil(source);
  });
  var sources = [destination].concat(existingObjects);
  return deepmerge.all(sources);
}